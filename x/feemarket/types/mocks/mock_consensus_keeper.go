// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	tenderminttypes "github.com/cometbft/cometbft/proto/tendermint/types"
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// ConsensusKeeper is an autogenerated mock type for the ConsensusKeeper type
type ConsensusKeeper struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *ConsensusKeeper) Get(ctx types.Context) (*tenderminttypes.ConsensusParams, error) {
	ret := _m.Called(ctx)

	var r0 *tenderminttypes.ConsensusParams
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (*tenderminttypes.ConsensusParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) *tenderminttypes.ConsensusParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenderminttypes.ConsensusParams)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsensusKeeper creates a new instance of ConsensusKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsensusKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsensusKeeper {
	mock := &ConsensusKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
